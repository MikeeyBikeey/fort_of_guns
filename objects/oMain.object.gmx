<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set font

font = font_add_sprite_ext(sFont, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-+_.:'!" + '"', 1, 1);
draw_set_font(font);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomize

randomize();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize guns

var room_w = 3;
var room_h = 3;

num_guns = room_w * room_h * 2 + 1;

xGunInit(num_guns);

var gun = xGunGet(irandom_range(1, num_guns - 1));
gun.endless_clip = true;

gun = xGunGet(irandom_range(1, num_guns - 1));
gun.follow = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize rooms

room_entry_x = room_width / 2;
room_entry_y = room_width / 2;

var room_w = 3;
var room_h = 3;

rooms = ds_grid_create(room_w, room_h);

room_x = 1;
room_y = 1;

// room entities

room_entities = ds_grid_create(room_w, room_h);
for(var i = 0; i &lt; room_w; i++) {
    for(var j = 0; j &lt; room_h; j++) {
        room_entities[# i, j] = ds_list_create();
    }
}

// rooms_done

rooms_done = ds_grid_create(room_w, room_h);
ds_grid_clear(rooms_done, false);
rooms_done[# 1, 1] = true;

// room_type

room_type = ds_grid_create(room_w, room_h);
ds_grid_clear(room_type, ROOMTYPE_NORMAL);
room_type[# 1, 2] = ROOMTYPE_BOSS;
room_type[# choose(0, 2), 0] = ROOMTYPE_BOSSKEY;
room_type[# choose(0, 2), 1] = ROOMTYPE_MAP;
//room_type[# 1, 0] = ROOMTYPE_DARK;

// room_guns

var cur_gun = 1;
room_guns1 = ds_grid_create(room_w, room_h)
for(var i = 0; i &lt; room_w; i++) {
    for(var j = 0; j &lt; room_h; j++) {
        room_guns1[# i, j] = cur_gun++;
    }
}

room_guns2 = ds_grid_create(room_w, room_h)
for(var i = 0; i &lt; room_w; i++) {
    for(var j = 0; j &lt; room_h; j++) {
        room_guns2[# i, j] = cur_gun++;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

has_key = false;
has_map = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init lighting

xLightingInit(512, 512);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cleanup

ds_grid_destroy(rooms);

for(var i = 0; i &lt; ds_grid_width(room_entities); i++) {
    for(var j = 0; j &lt; ds_grid_height(room_entities); j++) {
        ds_list_destroy(room_entities[# i, j]);
    }
}
ds_grid_destroy(room_entities);

ds_grid_destroy(room_type);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>xPushableUpdate</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>xTweenUpdate</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///beat room

if !rooms_done[# room_x, room_y] &amp;&amp; !instance_exists(oParentEnemy) &amp;&amp; !instance_exists(oParentRoomRequired) {
    rooms_done[# room_x, room_y] = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw map

if has_map {
    var up = 1 &lt;&lt; 0;
    var right = 1 &lt;&lt; 1;
    var down = 1 &lt;&lt; 2;
    var left = 1 &lt;&lt; 3;
    
    for(var i = 0; i &lt; ds_grid_width(rooms); i++) {
        for(var j = 0; j &lt; ds_grid_height(rooms); j++) {
            var spr = sMap;
            if i == room_x &amp;&amp; j == room_y {
                spr = sMapCur;
            } else if rooms_done[# i, j] {
                spr = sMapClear;
            }
            var spr_w = sprite_get_width(sMap) * 2;
            var spr_h = sprite_get_height(sMap) * 2;
        
            draw_sprite_ext(
                spr,
                (
                    ((j &gt; 0) * up) |
                    ((i &lt; (ds_grid_width(rooms) - 1)) * right) |
                    ((j &lt; (ds_grid_height(rooms) - 1)) * down) |
                    ((i &gt; 0) * left)
                ),
                view_wport[0] + i * spr_w - spr_w * ds_grid_width(rooms) - 1,
                j * spr_h + 1,
                2,
                2,
                0,
                -1,
                1,
            );
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw objective

if rooms_done[# room_x, room_y] {
    xDrawObjective("go to next room");
} else {
    xDrawObjective("default all enemies");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw dark room

if room == rMain &amp;&amp; (room_type[# room_x, room_y] == ROOMTYPE_DARK || room_type[# room_x, room_y] == ROOMTYPE_BOSS) {
    xLightingDraw();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug draw guns

/*
for(var i = 0; i &lt; num_guns; i++) {
    var gun = xGunGet(i);
    draw_sprite_ext(gun.sprite, 0, i * 64, 0, 4, 4, 0, -1, 1);
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>531</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_fullscreen</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
